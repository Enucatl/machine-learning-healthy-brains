require "rake"

namespace :histograms do
  meshes = Rake::FileList["../data/frontal_thickness-matteo-1479386566/*.vtk"]
  outputs = []
  for mesh in meshes do
    dirname = File.dirname(mesh).gsub(
      "frontal_thickness", "thickness_histograms")
    directory dirname
    output_name = File.join(
      dirname,
      File.basename(mesh, ".vtk") + "_frontal_hist.npy")
    desc output_name 
    file output_name => [mesh, dirname, "mesh_to_histograms.py"] do |t|
      sh "python #{t.prerequisites[2]} #{t.source}"
    end
    outputs.push output_name
  end

  test_meshes = Rake::FileList["../data/frontal_thickness-matteo-1480081355/*.vtk"]
  test_outputs = []
  for mesh in test_meshes do
    dirname = File.dirname(mesh).gsub(
      "frontal_thickness", "thickness_histograms")
    directory dirname
    output_name = File.join(
      dirname,
      File.basename(mesh, ".vtk") + "_frontal_hist.npy")
    desc output_name 
    file output_name => [mesh, dirname, "mesh_to_histograms.py"] do |t|
      sh "python #{t.prerequisites[2]} #{t.source}"
    end
    test_outputs.push output_name
  end

  desc "all test histograms"
  multitask :test => test_outputs

  desc "all train histograms"
  multitask :train => outputs

end


namespace :cluster do

  train_frontal = Rake::FileList["../data/thickness_histograms-matteo-1479386566/*frontal_cumulative.npy"]
  train_cerebellum = Rake::FileList["../data/thickness_histograms-matteo-1479386566/*cerebellum_cumulative.npy"]
  test_frontal = Rake::FileList["../data/thickness_histograms-matteo-1480081355/*frontal_cumulative.npy"]
  test_cerebellum = Rake::FileList["../data/thickness_histograms-matteo-1480081355/*cerebellum_cumulative.npy"]

  train_fc_cumulative = "../data/thickness_histograms-matteo-1479386566_frontal_cumulative.npy"
  train_c_cumulative = "../data/thickness_histograms-matteo-1479386566_cerebellum_cumulative.npy"
  test_fc_cumulative = "../data/thickness_histograms-matteo-1480081355_frontal_cumulative.npy"
  test_c_cumulative = "../data/thickness_histograms-matteo-1480081355_cerebellum_cumulative.npy"
  clustering = "clustering.py"

  to_cluster = {
    train_fc_cumulative => train_frontal,
    train_c_cumulative => train_cerebellum,
    test_fc_cumulative => test_frontal,
    test_c_cumulative => test_cerebellum,
  }

  for key, value in to_cluster
    desc key
    file key => ([clustering] + value.to_a) do |t|
      sh "python #{t.source} #{t.name} #{t.prerequisites.drop(1).join(' ')}"
    end
  end

  desc "create all cumulative arrays"
  task :gather_cumulative => to_cluster.keys

  train_fc_groups = "../data/groups_frontal.csv"
  train_c_groups = "../data/groups_cerebellum.csv"
  clutering_r = "clustering.R"

  desc train_fc_groups
  file train_fc_groups => [clutering_r, train_fc_cumulative] do |t|
    sh "./#{t.source} #{t.prerequisites[1]} ../data/targets.csv #{t.name}"
  end

  desc train_c_groups
  file train_c_groups => [clutering_r, train_c_cumulative] do |t|
    sh "./#{t.source} #{t.prerequisites[1]} ../data/targets.csv #{t.name}"
  end

  desc "groups from training data"
  task :train_groups => [train_fc_groups, train_c_groups]

  desc "prediction"
  file "prediction.csv" => [
    "predict_final.py",
    train_fc_cumulative,
    train_c_cumulative,
    train_fc_groups,
    train_c_groups,
    test_fc_cumulative,
    test_c_cumulative] do |t|
      sh "python #{t.prerequisites.join(' ')}"
  end

end
